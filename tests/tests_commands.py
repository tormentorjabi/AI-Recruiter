import logging
import random

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from datetime import datetime
from sqlalchemy import text
from datetime import datetime

from src.database.session import Session
from src.database.models import (
    Candidate, Application, Vacancy, BotQuestion,
    HrNotification, HrSpecialist
)

from src.database.models.application import ApplicationStatus

from tests.bot_questions_data import QUESTION_DATA

from src.database.utils.generate_application_token import set_application_token

logger = logging.getLogger(__name__)
tests_router = Router()


def generate_random_score():
    while True:
        random_number = random.random() * 100
        if 0 <= random_number <= 100:
            return round(random_number / 100, 2)


@tests_router.message(Command('clr_db'))
async def truncate_database(message: Message):
    try:
        await message.answer(
            "‚ùóÔ∏è–í–ù–ò–ú–ê–ù–ò–ï‚ùóÔ∏è\n"
            "–í–´ –í–´–ü–û–õ–ù–Ø–ï–¢–ï –ö–û–ú–ê–ù–î–£ –¢–ò–ü–ê `[DEVELOPMENT]`\n\n"
            "–£ –í–ê–° –ù–ï –î–û–õ–ñ–ù–û –ë–´–¢–¨ –î–û–°–¢–£–ü–ê –ö –ù–ï–ô –í –°–û–°–¢–û–Ø–ù–ò–ò `[PRODUCTION]`",
            parse_mode='Markdown'
        )
        with Session() as db:
            await message.answer(
                "‚ùóÔ∏è–í–´–ü–û–õ–ù–Ø–ï–ú –û–ß–ò–°–¢–ö–£ –ë–î...‚ùóÔ∏è\n"
            )
            
            query = (
            "TRUNCATE applications, candidates, vacancies, "
            "bot_questions, bot_interactions, hr_notifications, hr_specialists CASCADE"
            )
            
            db.execute(text(query))
            db.commit()
            
            await message.answer(
                "‚ùóÔ∏è–û–ß–ò–°–¢–ö–ê –ë–î –£–°–ü–ï–®–ù–ê‚ùóÔ∏è"
            )
        
    except Exception as e:
        logger.error(f'Error in clear_database: {str(e)}')


@tests_router.message(Command('token_test'))
async def populate_database_and_generate_candidate_token_test(message: Message):
    try:
        await truncate_database(message)
        with Session() as db:
            await message.answer(
                "–ü–†–ò–°–¢–£–ü–ê–ï–ú –ö –ó–ê–ü–û–õ–ù–ï–ù–ò–Æ –ë–î..."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
            vacancy = Vacancy(
                title = '–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è',
                description = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏',
                created_at = datetime.utcnow()
            )
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ë–ï–ó Telegram ID
            candidate = Candidate(
                full_name = "–§–ê–ú–ò–õ–ò–Ø –ò–ú–Ø –û–¢–ß–ï–°–¢–í–û",
                birth_date = '1991-01-01',
                city = None,
                citizenship = None,
                relocation_ready = True
            )
            
            db.add(vacancy)
            db.add(candidate)
            db.flush()

            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
            for q_data in QUESTION_DATA:
                question = BotQuestion(
                    vacancy_id = vacancy.id,
                    question_text = q_data['question_text'],
                    order = q_data['order'],
                    expected_format = q_data['expected_format'],
                    choices = q_data['choices']
                )
                db.add(question)
                
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –µ–≥–æ –æ—Ç–∫–ª–∏–∫
            application = Application(
                candidate_id = candidate.id,
                vacancy_id = vacancy.id,
                status = ApplicationStatus.ACTIVE,
                application_date = datetime.utcnow()
            )
            
            db.add(application)
            db.flush()
            
            application_id = application.id
            is_telegram_id_present = True if candidate.telegram_id else False
            
            db.commit()
            
        await message.answer(
            "üî• –ë–î –ó–ê–ü–û–õ–ù–ï–ù–ê –¢–ï–°–¢–û–í–´–ú–ò –î–ê–ù–ù–´–ú–ò"
        )
        
        # –ü—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –º—ã –Ω–µ –Ω–∞—à–ª–∏ —É –Ω–µ–≥–æ Telegram ID,
        # –ø–æ—ç—Ç–æ–º—É —Å–æ–∑–¥–∞–ª–∏ –æ—Ç–∫–ª–∏–∫ –±–µ–∑ –¥–∞–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ù–æ —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ
        # —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –µ–≥–æ –≤ –±–æ—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É, –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º:
        if not is_telegram_id_present:
            returned_token_value = await send_application_token(application_id=application_id)
            await message.answer(
                "–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É —É—Å–ø–µ—à–Ω–∞\n\n"
                f"–¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: `{returned_token_value}`\n"
                "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –±–µ–∑ TG ID –≤ —Ä–µ–∑—é–º–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ: /start",
                parse_mode='Markdown'
            )
            
    except Exception as e:
        logger.error(f'Error in populate_database_test: {str(e)}')
        

@tests_router.message(Command('notification_test'))
async def create_notifications(message: Message):
    try:
        args = message.text.split(maxsplit=1)[1:] if len(message.text.split()) > 1 else []
        count = int(args[0].strip())
        with Session() as db:
            await message.answer(
                "–ü–†–ò–°–¢–£–ü–ê–ï–ú –ö –ó–ê–ü–û–õ–ù–ï–ù–ò–Æ –ë–î..."
            )
         
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
            vacancy = Vacancy(
                title = '–¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è',
                description = '–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏',
                created_at = datetime.utcnow()
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            candidate = Candidate(
                full_name = "–§–ò–û_–ö–ê–ù–î–ò–î–ê–¢–ê",
                birth_date = '1991-01-01',
                city = None,
                citizenship = None,
                relocation_ready = True,
                telegram_id=str(message.from_user.id)
            )
            
            hr = HrSpecialist(
                telegram_id=str(message.from_user.id),
                full_name="Maxim",
                is_approved=True,
                work_mode=True,
                created_at=datetime.utcnow()
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î –µ–≥–æ –æ—Ç–∫–ª–∏–∫
            application = Application(
                candidate_id = candidate.id,
                vacancy_id = vacancy.id,
                status = ApplicationStatus.ACTIVE,
                application_date = datetime.utcnow()
            )
            
            db.add(hr)
            db.add(vacancy)
            db.add(candidate)
            db.add(application)
            db.flush()

            for i in range(0, count):
                score = generate_random_score()
                notification = HrNotification(
                    candidate_id=candidate.id,
                    hr_specialist_id=hr.id,
                    vacancy_id=vacancy.id,
                    application_id=application.id,
                    channel='telegram',
                    analysis_score=score,
                    final_decision='approve' if score > 0.8 else 'reject',
                    sent_at=datetime.utcnow(),
                    status='new'
                )
                db.add(notification)
            
            db.commit()    
        await message.answer(
        "üî• –ë–î –ó–ê–ü–û–õ–ù–ï–ù–ê –¢–ï–°–¢–û–í–´–ú–ò –î–ê–ù–ù–´–ú–ò"
    )
    except Exception as e:
        logger.error(f'Error in create_notifications: {str(e)}')
        
        
async def send_application_token(application_id, candidate_email=None, candidate_phone=None):
    '''–ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –µ–≥–æ –æ—Ç–∫–ª–∏–∫–∞'''
    token = set_application_token(application_id=application_id)
    if not token:
        logger.error(f'Failed to generate token for application with ID: {application_id}')
        return ''
    
    with Session() as db:
        application = db.query(Application).get(application_id)
        if not application:
            return ''
            
        candidate = db.query(Candidate).get(application.candidate_id)
        if not candidate:
            return ''
        
        if candidate_email:
            # –ù–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ email?
            return ''
        
        elif candidate_phone:
            # –ù–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É?
            return ''
        
        else:
            return token