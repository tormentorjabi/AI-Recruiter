from .client import get_gigachat_client
from typing import Dict

import requests
import json

from langchain_core.messages import SystemMessage, HumanMessage

class ResumeScreening:
    """
    Скрининг резюме кандидата
    
    Methods:
        screen_resume(resume_info):
            Проводит оценку резюме кандидата с помощью GigaChat
    """
    def __init__(self):
        # Инициализируем GigaChat клиент
        self.giga = get_gigachat_client()
        
    def screen_resume(self, resume_info: list[str], job_requirements=None):
        """
        Провести оценки резюме кандидата с помощью GigaChat
        
        Args:
            resume_info (str): Обобщенная информация о резюме кандидата
            job_requirements: Специфические требования по вакансии
            
        Returns:
            str: Оценка от GigaChat относительно резюме
        """
        template = "Оцени часть резюме и поставь одну итоговую оценку в соответствии с приведёнными правилами. Строго следуй этому формату: {\"Баллы\": <целое число>, \"Причина\": \"<объяснение>\"}"

        ask_q = [   "Критерий: опыт работы в следующих сферах (оцени в указанном порядке): Если в резюме есть опыт работы в Контактном центре — поставь 20 баллов и прекрати оценку. Если в Контактном центре не работал, но есть опыт в продажах — поставь 20 баллов и прекрати оценку. Если ни Контактного центра, ни продаж, но есть опыт в сфере услуг — поставь 20 баллов и прекрати оценку. Если ни один из вышеуказанных опытов не найден — поставь 0 баллов. Важно: Оцени только по первому подходящему пункту из списка. Поставь только одну итоговую оценку — не суммируй баллы. После нахождения подходящего опыта остановись и не проверяй следующие пункты. Объясни, какой пункт сработал.",
                    "Критерий: Клиентоориентированность. Правила оценки: Если человек напрямую указал, что он клиентоориентированный, поставь 10 баллов и кратко объясни, почему. Если не указано напрямую, но по опыту работы можно понять, что он работал с клиентами и, вероятно, клиентоориентированный — поставь 5 баллов и объясни. Если в опыте работы нет указаний на взаимодействие с клиентами, поставь 0 баллов и тоже объясни. Важно: Поставь только одну оценку — 0, 5 или 10",
                    "Поставь только одну оценку — 0, 5 или 10, никакие другие баллы не ставь. Критерий: Навык работы на компьютере. Правила оценки: Если в резюме есть упоминание компьютерных программ (например, Word, Excel, PowerPoint, Git, специализированные софты) или опыт работы, предполагающий использование компьютера — поставь 10 баллов и кратко объясни, почему. сли в резюме нет признаков работы с компьютером — поставь 0 баллов и объясни. Важно: оцени строго по шкале 0 или 10. Не ставь промежуточных значений. Не ставь отдельные оценки за каждый навык — только одну общую.",
                    "Критерий: Стрессоустойчивость. Правила оценки: Если человек прямо указал, что он стрессоустойчивый — поставь 10 баллов и кратко объясни, почему. Если это не указано напрямую, но по опыту работы можно сделать обоснованный вывод, что человек проявлял стрессоустойчивость (например, работа в условиях высокой нагрузки, с конфликтными ситуациями, в экстренных ситуациях и т.п.) — поставь 5 баллов и объясни. Если из резюме невозможно понять, обладает ли человек стрессоустойчивостью — поставь 0 баллов и объясни. Важно: поставь только одну оценку — 0, 5 или 10. Не ставь промежуточных значений и не делай несколько оценок.",
                    "Критерий: Опыт работы в сменном графике. Правила оценки: Если в резюме указано, что человек работал по сменному графику (например, работа посменно, сменный режим, работа в ночные смены, дежурства и т.п.) — поставь 10 баллов и кратко объясни, почему. Если такого опыта нет или он не указан — поставь 0 баллов и объясни.",
                 ]
    
        p_service = "\n".join([template, ask_q[0], resume_info[4]])
        p_customer_focus = "\n".join([template, ask_q[1], resume_info[4], resume_info[5]])
        p_computer = "\n".join([template, ask_q[2], resume_info[4], resume_info[5]])
        p_stress = "\n".join([template, ask_q[3], resume_info[4], resume_info[5]])
        p_work_schedule = "\n".join([template, ask_q[4], resume_info[6]])
        asks = [p_service, p_customer_focus, p_computer, p_stress, p_work_schedule]
        answers = []
        try:
            for ask in asks:
                messages = [
                    HumanMessage(content=ask)
                ]
                    
                response = self.giga.invoke(messages, temperature=0)
                answers.append(response.content)
            return answers
            
        except Exception as e:
            print(f'Error occured in direct LLM task: {e}')
            return None