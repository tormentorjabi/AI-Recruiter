from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message

from src.database.session import Session
from src.database.models import HrSpecialist


hr_commands_router = Router()

class ToggleWorkModeStates(StatesGroup):
    waiting_for_confirmation = State()

@hr_commands_router.message(Command('change_work_mode'))
async def toggle_work_mode(
    message: Message,
    state: FSMContext
):
    with Session() as db:
        hr = db.query(HrSpecialist).filter_by(
            telegram_id=str(message.from_user.id),
            is_approved=True
        ).first()

        if not hr:
            await message.answer(
                "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.\n"
                "–ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ HR, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ "
                "—Ç–æ–∫–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ "
                "–∫–æ–º–∞–Ω–¥—É /register_hr"
            )
            return
        
        hr_work_mode = hr.work_mode
        
        await state.update_data(hr_id=hr.id)
        await message.answer(
                "–†–µ–∂–∏–º –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
                f"{'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if hr_work_mode else '‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}\n\n"
                "–•–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º?\n"
                "–í–≤–µ–¥–∏—Ç–µ [–î–∞/–ù–µ—Ç] –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:"
            )
        await state.set_state(ToggleWorkModeStates.waiting_for_confirmation)
        

@hr_commands_router.message(
    StateFilter(ToggleWorkModeStates.waiting_for_confirmation),
    F.text.casefold().in_({"–¥–∞", "yes", "–¥", "y"})
)
async def confirm_change_work_mode(message: Message, state: FSMContext):
    data = await state.get_data()
    
    with Session() as db:
        hr = db.query(HrSpecialist).get(data['hr_id'])
    
        if not hr:
            await message.answer("‚ùå HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            await state.clear()
            return

        new_status = not hr.work_mode
        hr.work_mode = new_status
        db.commit()

        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if new_status else "–ù–µ –∞–∫—Ç–∏–≤–µ–Ω"
        await message.answer(
            f"üÜï –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: `{status_text}`\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö: {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if new_status else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}",
            parse_mode="Markdown"
        )
    
    await state.clear()
    

@hr_commands_router.message(
    StateFilter(ToggleWorkModeStates.waiting_for_confirmation)
)
async def cancel_change_work_mode(message: Message, state: FSMContext):
    await message.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    await state.clear()
