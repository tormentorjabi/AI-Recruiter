"""Alter BotInteractions table & added enums to Applications and BotQuestions

Revision ID: ed729be4da09
Revises: 01a772327caa
Create Date: 2025-04-15 18:21:14.101841

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ed729be4da09'
down_revision: Union[str, None] = '01a772327caa'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    op.execute("CREATE TYPE applicationstatus AS ENUM ('ACTIVE', 'ACCEPTED', 'REJECTED')")
    op.execute("CREATE TYPE interactionstate AS ENUM ('STARTED', 'ANSWERING', 'REVIEW', 'COMPLETED', 'PAUSED')")
    op.execute("CREATE TYPE answerformat AS ENUM ('TEXT', 'FILE', 'CHOICE')")
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('applications', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('ACTIVE', 'ACCEPTED', 'REJECTED', name='applicationstatus'),
               existing_nullable=True,
               postgresql_using='status::applicationstatus')
    op.add_column('bot_interactions', sa.Column('application_id', sa.Integer(), nullable=False))
    op.add_column('bot_interactions', sa.Column('current_question_id', sa.Integer(), nullable=True))
    op.add_column('bot_interactions', sa.Column('vacancy_id', sa.Integer(), nullable=True))
    op.add_column('bot_interactions', sa.Column('current_step', sa.Integer(), nullable=True))
    op.add_column('bot_interactions', sa.Column('answers', sa.JSON(), nullable=True))
    op.add_column('bot_interactions', sa.Column('state', sa.Enum('STARTED', 'ANSWERING', 'REVIEW', 'COMPLETED', 'PAUSED', name='interactionstate'), nullable=True))
    op.add_column('bot_interactions', sa.Column('started_at', sa.DateTime(), nullable=True))
    op.add_column('bot_interactions', sa.Column('completed_at', sa.DateTime(), nullable=True))
    op.drop_constraint('bot_interactions_question_id_fkey', 'bot_interactions', type_='foreignkey')
    op.create_foreign_key(None, 'bot_interactions', 'applications', ['application_id'], ['id'])
    op.create_foreign_key(None, 'bot_interactions', 'vacancies', ['vacancy_id'], ['id'])
    op.create_foreign_key(None, 'bot_interactions', 'bot_questions', ['current_question_id'], ['id'])
    op.drop_column('bot_interactions', 'question_id')
    op.drop_column('bot_interactions', 'user_id')
    op.drop_column('bot_interactions', 'chat_id')
    op.drop_column('bot_interactions', 'current_state')
    op.drop_column('bot_interactions', 'updated_at')
    op.alter_column('bot_questions', 'expected_format',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('TEXT', 'FILE', 'CHOICE', name='answerformat'),
               nullable=False,
               postgresql_using='expected_format::answerformat')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('applications', 'status',
               existing_type=sa.Enum('ACTIVE', 'ACCEPTED', 'REJECTED', name='applicationstatus'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True,
               postgresql_using='status::varchar')
    
    op.alter_column('bot_questions', 'expected_format',
               existing_type=sa.Enum('TEXT', 'FILE', 'CHOICE', name='answerformat'),
               type_=sa.VARCHAR(length=20),
               nullable=True,
               postgresql_using='expected_format::varchar')
    
    op.execute("DROP TYPE applicationstatus")
    op.execute("DROP TYPE interactionstate")
    op.execute("DROP TYPE answerformat")
    
    op.add_column('bot_interactions', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('bot_interactions', sa.Column('current_state', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('bot_interactions', sa.Column('chat_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('bot_interactions', sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('bot_interactions', sa.Column('question_id', sa.INTEGER(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'bot_interactions', type_='foreignkey')
    op.drop_constraint(None, 'bot_interactions', type_='foreignkey')
    op.drop_constraint(None, 'bot_interactions', type_='foreignkey')
    op.create_foreign_key('bot_interactions_question_id_fkey', 'bot_interactions', 'bot_questions', ['question_id'], ['id'])
    op.drop_column('bot_interactions', 'completed_at')
    op.drop_column('bot_interactions', 'started_at')
    op.drop_column('bot_interactions', 'state')
    op.drop_column('bot_interactions', 'answers')
    op.drop_column('bot_interactions', 'current_step')
    op.drop_column('bot_interactions', 'vacancy_id')
    op.drop_column('bot_interactions', 'current_question_id')
    op.drop_column('bot_interactions', 'application_id')
    # ### end Alembic commands ###
